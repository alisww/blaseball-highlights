const grandSlalami = require('grand-slalami');

let gameEvents = {};
let highlights = {};

/*
 * highlights:
 * {
 *   id: '', chronicler hash?
 *   gameEvent: {}, just the data
 *   commentary: '', first generated by grand-slalami
 * }
 */

const generateHighlights = () => {
  $('.game-event-select__option:selected').each((_, selected) => {
    const id = $(selected).val();

    highlights[id] = {
      id: id,
      gameEvent: gameEvents[id],
      commentary: grandSlalami.getComment({
        gameEvent: gameEvents[id].data,
      }),
    };
  });

  console.debug('generateHighlights:', highlights);
};

const renderGameEv = (gameEv) => {
  const data = gameEv.data;

  const $option = $('<option>');
  const $score = $('<span>');
  const $update = $('<span>');
  const $bases = $('<span>');
  const $balls = $('<span>');
  const $strikes = $('<span>');
  const $outs = $('<span>');

  $score
    .text(`${data.homeScore} - ${data.awayScore}`)
    .addClass('game-event__score');
  $update
    .text(`${data.lastUpdate} ${data.scoreUpdate || ''}`)
    .addClass('game-event__update');
  $bases
    .text(`Bases occ: `)
    .addClass('game-event__bases');
  $balls
    .text(`B: ${data.atBatBalls}`)
    .addClass('game-event__balls');
  $strikes
    .text(`S: ${data.atBatStrikes}`)
    .addClass('game-event__strikes');
  $outs
    .text(`O: ${data.halfInningOuts}`)
    .addClass('game-event__outs');

  $option
    .val(`${gameEv.hash}`)
    .addClass('game-event-select__option')
    .append($score)
    .append($update)
    .append($bases)
    .append($balls)
    .append($strikes)
    .append($outs);

  return $option;
};

const renderGameEvs = () => {
  stopLoading();
  $('#game-events-select').removeClass('d-none');

  const $container = $('#game-events-select__select');

  // gotta render some general stuff too (home vs away, s#d#, weather)
  // also: label for the select, and the select itself
  for (let id in gameEvents) {
    $container.append(renderGameEv(gameEvents[id]));
  }
};

const getGameEvents = async (gameId, nextPage) => {
  let gamesURL = `https://api.sibr.dev/chronicler/v1/games/updates?game=${gameId}`;

  if (nextPage) {
    gamesURL += `&page=${nextPage}`;
  }

  startLoading();

  const resp = await fetch(gamesURL);

  if (resp.ok) {
    const data = await resp.json();

    for (let gameEv of data.data) {
      gameEvents[gameEv.hash] = gameEv;
    }

    if (data.nextPage) {
      getGameEvents(gameId, data.nextPage);
    } else {
      // done loading all game events
      renderGameEvs();
      console.debug('getGameEvents done:', gameEvents);
    }

  }
};

const startLoading = () => {
  const $gameEvForm = $('#game-event-form');

  $gameEvForm.find('button').addClass('d-none');
  $gameEvForm.find('.spinner-border').removeClass('d-none');
};

const stopLoading = () => {
  const $gameEvForm = $('#game-event-form');

  $gameEvForm.find('button').removeClass('d-none');
  $gameEvForm.find('.spinner-border').addClass('d-none');
};

const initApp = () => {
  const $gameEvForm = $('#game-event-form');

  $gameEvForm.on('submit', (ev) => {
    ev.preventDefault();

    const gameId = $gameEvForm.find('#game-id').val();
    getGameEvents(gameId);
  });

  const $highlightsSelectForm = $('#game-events-select__form');

  $highlightsSelectForm.on('submit', (ev) => {
    ev.preventDefault();
    generateHighlights();
  });

};

initApp();

